<?php
include_once(drupal_get_path('module', 'churchcore') .'/churchcore_db.inc');
include_once(drupal_get_path('module', 'churchdb') .'/churchdb_db.inc');
//include_once("churchservice_db.inc");

// Gibt array mit g_ids zurŸck
function churchservice_getGroupsOfService($service_id) {
  // Erst die Gruppen_Ids aus cs_service anhand der sg_id
  $res=db_query("select cdb_gruppen_ids from {cs_service} where id=$service_id");
  $arr=array();
  foreach($res as $entry) {
    if ($entry->cdb_gruppen_ids!=null) {
      $arr[]=$entry->cdb_gruppen_ids;
    }    
  }
  // Das ist nun ein Array, bei dem auch einige mit , getrennt sind. Also Join und Explode.
  if (count($arr)==0) 
    return $arr;
  else
    return explode(",", implode(',',$arr));  
}


// Gibt array mit g_ids zurŸck
function churchservice_getGroupsOfServiceGroup($servicegroup_id) {
  // Erst die Gruppen_Ids aus cs_service anhand der sg_id
  $res=db_query("select cdb_gruppen_ids from {cs_service} where servicegroup_id=$servicegroup_id");
  $arr=array();
  foreach($res as $entry) {
    if ($entry->cdb_gruppen_ids!=null) {
      $arr[]=$entry->cdb_gruppen_ids;
    }    
  }
  // Das ist nun ein Array, bei dem auch einige mit , getrennt sind. Also Join und Explode.
  if (count($arr)==0) 
    return $arr;
  else
    return explode(",", implode(',',$arr));  
}

$auth=null;

function churchservice_getAuthorization() {
  global $auth;
  if (!isset($_SESSION["user"]->auth["churchservice"]))
    return null;
     
  $auth=$_SESSION["user"]->auth["churchservice"];

  $res=null;
  $user_pid=churchcore_getCurrentUserPid();
  $res["user_pid"]=$user_pid;
  
  if (user_access("view","churchdb")) 
    $res["viewchurchdb"]=true;
  
  if (isset($auth["view"]))
    $res["read"]=true;
  if (isset($auth["edit events"])) {
    $res["read"]=true;
    $res["write"]=true;
  }  
  if (isset($auth["view history"]))
    $res["viewhistory"]=true;
  if (isset($auth["export data"]))
    $res["export"]=true;
  if (isset($auth["edit masterdata"])) {
    $res["admin"]=true;
  }
  
  if (isset($auth["manage absent"])) {
    $res["manageabsent"]=true;
  }
  if (isset($auth["edit facts"])) {
    $res["editfacts"]=true;
  }
  if (isset($auth["view song"])) {
    if (isset($auth["view songcategory"])) {
      $res["viewsong"]=true;
      $res["viewsongcategory"]=$auth["view songcategory"];
    }
  }
  if (isset($auth["edit song"])) {
    if (isset($auth["view songcategory"])) {
      $res["viewsong"]=true;
      $res["editsong"]=true;
      $res["viewsongcategory"]=$auth["view songcategory"];
    }
  }
  
  if (isset($auth["view servicegroup"])) 
    $res_view=$auth["view servicegroup"];
  else $res_view=array();
  // Prï¿½fe nach, ob ich irgendwo dabei bin
  $arr=churchcore_getTableData("cs_servicegroup","sortkey");
  
  $myTnGroups=churchdb_getMyGroups($user_pid, true, false);
  $myLdGroups=churchdb_getMyGroups($user_pid, true, true);
  
  foreach ($arr as $grp) {
    $groups=churchservice_getGroupsOfServiceGroup($grp->id);    
    if (($grp->viewall_yn==1) || (array_in_array($groups, $myTnGroups))) {
      $res_view[$grp->id]=true;
    }
  }
  $res["viewgroup"]=$res_view;
  
  if (isset($auth["edit servicegroup"]))
    $res["editgroup"]=$auth["edit servicegroup"];
  else $res["editgroup"]=array();
  
  // PrŸfe nun, ob der aktuelle User Leiter oder zumindest Teilnehmer einer Gruppe ist
  // Dies hat entscheidende Auswirkung auf die Mï¿½glichkeiten beim ï¿½ndern der Eintrï¿½ge
  $arr=churchcore_getTableData("cs_service","sortkey");
  $res_member=array();
  $res_leader=array();
  $res_edit=array();
  
  foreach ($arr as $service) {
    $groups=churchservice_getGroupsOfService($service->id);    
    if (array_in_array($groups, $myLdGroups)) {
      $res_member[$service->id]=true;
      $res_leader[$service->id]=true;
    }
    else if (array_in_array($groups, $myTnGroups)) {
      $res_member[$service->id]=true;
    }
    // Hat er in der ServiceGroup das Edit-Recht
    if (isset($res["editgroup"][$service->servicegroup_id]))
      $res_edit[$service->id]=true;
  }
  $res["memberservice"]=$res_member;
  $res["leaderservice"]=$res_leader;
  $res["editservice"]=$res_edit;
  
  $auth=$res;
  return $res;
}


/**
 * 
 * @param $subject
 * @param $message
 * @param $to
 */
function churchservice_send_mail ($subject, $message, $to) { 
  churchcore_systemmail($to, $subject, $message, true);
}  


function churchservice_getModulesPath() {
  return drupal_get_path('module', 'churchservice');
}

function churchservice_getVersion() {
  $config = parse_ini_file(churchservice_getModulesPath()."/churchservice.info"); 
  return $config["version"];
}

function churchservice_extractEventServiceData($arr, $auth=null, $event_admin=false) {
  $res=array();
  $res["id"]=(isset($arr->eventservice_id)?$arr->eventservice_id:$arr->id);
  $res["service_id"]=$arr->service_id;
  $res["counter"]=$arr->counter;
  $res["name"]=$arr->name;
  $res["cdb_person_id"]=$arr->cdb_person_id;
  $res["zugesagt_yn"]=$arr->zugesagt_yn;
  $res["valid_yn"]=$arr->valid_yn;
  $res["datum"]=$arr->modified_date;
  $res["user_id"]=$arr->modified_pid;
  $res["user"]=$arr->modifieduser;
  $res["mailsenddate"]=$arr->mailsenddate;
  if (($auth!=null) && ($arr->reason!=null)) {
    if (((isset($auth["leaderservice"])) && (isset($auth["leaderservice"][$arr->service_id])))||(isset($auth["admin"]))||($event_admin)) 
      $res["reason"]=$arr->reason;
  } 
  return $res;
}


/*
 * Holt sich neue Eventdaten die nach der LastLogId geï¿½ndert wurden.
 */
function churchservice_getNewEventData($last_id) {
  global $user;
  $arr=db_query("select event_id from {cs_eventservice} where modified_pid!=:user and id>=:last_id group by event_id",
                   array(":user"=>$user->id, ":last_id"=>$last_id));
  $events=array();                   
  foreach ($arr as $data) {
    $event=churchservice_getAllEventData($data->event_id);
    $events[$data->event_id]=$event[$data->event_id];
  }
  return $events;
}

/** Lï¿½dt alle Events und nur die Services die sollen **/
function churchservice_getAllEventData($id) { 
  global $user;
  $auth=churchservice_getAuthorization();
  
  $cat=churchcal_getAllowedCategories(false, true);
  $cat[]=-1;
  
  $lastday=-variable_get('churchservice_entries_last_days');
  //$auth=user_access("view servicegroup","churchservice");
  $sql = db_query('SELECT e.id, e.startdate startdate, cal.enddate, e.cc_cal_id, cal.bezeichnung, e.special, cal.category_id, e.admin, datediff(e.startdate,CURRENT_DATE) datediff
                   FROM {cs_event} e, {cc_cal} cal where cal.id=e.cc_cal_id and '.(isset($id)?"e.id=$id":"1=1").
                   " AND cal.category_id in (".implode(",",$cat).")");
  
  $sql_s = "select es.service_id, es.name, es.cdb_person_id, es.id eventservice_id, es.counter,
               es.zugesagt_yn, es.valid_yn, es.modified_date, es.modified_pid, es.mailsenddate,
               case when p.id is null then '?' else  
               concat(p.vorname, ' ',p.name) end as modifieduser, 
               es.reason, s.servicegroup_id 
               from {cs_service} s, {cs_eventservice} es left join {cdb_person} p on (es.modified_pid=p.id) 
               where es.service_id=s.id and event_id=:event_id";
  $events=array();
  if ($sql!=false) {
    foreach ($sql as $arr) {
      // Hole noch Booking_Infos, damit ich wei§, dass er hier nicht das Datum Šndern darf.
      $b=db_query("select * from {cr_booking} where cc_cal_id=:cal_id", array(":cal_id"=>$arr->cc_cal_id))->fetch();
      $arr->bookings=$b!=false;
      // Nun geht es los!
      $events[$arr->id]=$arr;
      $event_admin=false;
      if ($arr->admin==null)
        $events[$arr->id]->admin=null;
      else if (in_array($user->id, explode(",",$arr->admin))) $event_admin=true;
      if ($arr->special==null)
        $events[$arr->id]->special=null;
        
      if ((1==1) && ($arr->datediff>$lastday)) {
        $services=db_query($sql_s, array(":event_id"=>$arr->id));
        $s=array();
        foreach ($services as $service) {
          if (($service->servicegroup_id!=null) && 
             ((isset($auth["viewgroup"][$service->servicegroup_id])) || ($event_admin))) {        
            $s[]=churchservice_extractEventServiceData($service, $auth, $event_admin);      
          }
        }
        if (count($s)>0)
          $events[$arr->id]->services=$s;
      }
    }
  }
  return $events;
}


/**
 * Erzeugt eine Uebersicht ueber alle Stammdatentabellen, die per MaintainView gepflegt werden sollen
 * Diese Infos werden per JSON an das JS uebergeben
 */
function churchservice_getMasterDataTablenames() {
  $res=array();
//  $res[2]=churchcore_getMasterDataEntry(2, "Service", "service", "cs_service");
  $res[3]=churchcore_getMasterDataEntry(3, "Service-Gruppe", "servicegroup", "cs_servicegroup","sortkey");
  //$res[4]=churchcore_getMasterDataEntry(4, "Event-Kategorien", "category", "cs_category","sortkey");
  $res[5]=churchcore_getMasterDataEntry(5, "Abwesenheitsgrund", "absent_reason", "cs_absent_reason","sortkey");
  $res[6]=churchcore_getMasterDataEntry(6, "Fakten", "fact", "cs_fact","sortkey");
  $res[7]=churchcore_getMasterDataEntry(7, "Song-Kategorien", "songcategory", "cs_songcategory","sortkey");
  
  return $res;
}

function churchservice_getMasterDataTables() {
  $tables=churchservice_getMasterDataTablenames();
  foreach ($tables as $value) {
    $res[$value["shortname"]]=churchcore_getTableData($value["tablename"],$value["sql_order"]);
  }
  return $res;
}

/**
 * 
 * @param unknown_type $event_id
 * @param unknown_type $service_id
 */
/* FUNKTIONIERT ABER MOMENTAN NICHT BENï¿½TIGT!
function churchservice_delServiceFromEvent($event_id, $service_id) {
global $user;
  $auth=churchservice_getAuthorization();
  if ((!isset($auth["editservice"][$service_id])) && (!isset($auth["leaderservice"][$service_id])))
    return "Not enough rights!";
     
    cdb_log("[ChurchService] Entferne Service ".$service_id." vom Event",2,$event_id,"service");          
    db_query("delete from {cs_eventservice} where event_id=:event_id and service_id=:service_id",
    array(":event_id"=>$_GET["id"], ":service_id"=>$_GET["service_id"]));
  return "ok";
}
*/

function churchService_adminOfEvent($event_id) {
  $res=db_query("select admin from {cs_event} where id=$event_id")->fetch();  
  $split = explode(",",$res->admin);
  $dabei=false;
  foreach ($split as $us) {  
    if ($us==churchcore_getCurrentUserPid())
      $dabei=true;
  }
  return $dabei;  
}

function churchservice_addOrRemoveServiceToEvent() {
global $user;
  $problem=false;
  $auth=churchservice_getAuthorization();
  $k=0;
  while ((isset($_GET["col".$k])) && (!$problem)) {
    $fields=array();
    $fields["event_id"]=$_GET["id"];
    $fields["service_id"]=$_GET["col".$k];
    
    $dt = new datetime();
    $fields["valid_yn"]=1;
    $fields["modified_date"]=$dt->format('Y-m-d H:i:s');
    $fields["modified_pid"]=$user->id;
    
    $db=db_query("select count(*) c from {cs_eventservice} where event_id=:event_id and service_id=:service_id and valid_yn=1",
       array(":service_id"=>$fields["service_id"], ":event_id"=>$fields["event_id"]))->fetch();
    // Soll bleiben bzw. erstellt werden
    $soll=0;
    $ist=$db->c;
    if ((isset($_GET["val".$k]) && ($_GET["val".$k]=="checked"))) {
      if (isset($_GET["count".$k])) $soll=$_GET["count".$k];
      else $soll=1;
    }

    if ($ist!=$soll) {
      if ((!isset($auth["editservice"][$_GET["col".$k]])) && (!isset($auth["leaderservice"][$_GET["col".$k]])) && (!churchService_adminOfEvent($_GET["id"])))
        return "Not enough rights in addOrRemoveServiceToEvent: ".$_GET["col".$k];
      if (($ist==1) && ($soll>1))
        // Wenn es nur einen gibt und nun mehr geben soll, lege noch den Counter auf 1, damit es schï¿½ner aussieht.
        db_query("update {cs_eventservice} set counter=1 where event_id=:event_id and service_id=:service_id and counter is null",
           array(":event_id"=>$fields["event_id"], ":service_id"=>$fields["service_id"]));
      if (($ist>1) && ($soll==1))
        // Wenn es mehrer gibt aber nun nur noch einen geben soll, dann setze den Counter auf Null damit es schšner aussieht
        db_query("update {cs_eventservice} set counter=null where event_id=:event_id and service_id=:service_id and counter=1",
           array(":event_id"=>$fields["event_id"], ":service_id"=>$fields["service_id"]));
    }
    //echo "ist:$ist soll$soll";
    while ($ist<$soll) {
      $ist=$ist+1;
      if ($soll==1) {
        // Wenn es nur einen gibt, dann ist es der erste, hier soll Count dann null sein
        $fields["counter"]=null;
      } 
      else if ($soll>1) {
        // Nun prŸfe nach dem ersten freien Count
        $count=1;
        $ok=false;
        while ((!$ok) && ($count<100)) {
          $res=db_query("select count(*) c from {cs_eventservice} where 
                   event_id=:event_id and service_id=:service_id and counter=$count",
              array(":event_id"=>$fields["event_id"], ":service_id"=>$fields["service_id"]))
            ->fetch();
          if ($res->c==0) $ok=true;
          else $count=$count+1;
        }
        $fields["counter"]=$count;
      }
        
      db_insert("cs_eventservice")
        ->fields($fields)
        ->execute();
      cdb_log("[ChurchService] Erstelle Service ".$fields["service_id"]." fuer Event",2,$fields["event_id"],"service");
    }
    while (($ist>$soll) && (!$problem)) {
      // Hole den hšchsten freien Count, wenn es keinen gibt, dann stimmt was nicht, denn
      // das wird ja eigentlich Ÿber JS sichergestellt, dass nur das gelšscht werden kann, wenn was frei ist       
      $res=db_query("select max(counter) c from {cs_eventservice} where 
                   event_id=:event_id and service_id=:service_id and name is null and valid_yn=1",
          array(":event_id"=>$fields["event_id"], ":service_id"=>$fields["service_id"]))
          ->fetch();
      if ($res==null) {
        $problem=true;
      }
      else {  
        if ($res->c==null)
          $counter="counter is null";
        else $counter="counter=".$res->c;      
        db_query("delete from {cs_eventservice} where event_id=:event_id and service_id=:service_id and ".$counter,
            array(":event_id"=>$fields["event_id"], ":service_id"=>$fields["service_id"]));
        cdb_log("[ChurchService] Entferne Service ".$fields["service_id"]." $counter vom Event",2,$fields["event_id"],"service");
        $ist=$ist-1;
      }                
    }
    $k++;
  }
  if ($problem) return "Fehler aufgetreten!";
  else return "ok";     
}

function churchservice_deleteEvent($event_id) {
  cdb_log("[ChurchService] Entferne Event!",2,$event_id,"service");          
  db_query("delete from {cs_eventservice} where event_id=:event_id", array(":event_id"=>$event_id));
  db_query("delete from {cs_event} where id=:event_id", array(":event_id"=>$event_id));
  return "ok";
}

function churchservice_deleteService($service_id) {
  cdb_log("[ChurchService] Entferne Service!",2,$service_id,"service");          
  db_query("delete from {cs_eventservice} where service_id=:service_id", array(":service_id"=>$service_id));
  db_query("delete from {cs_service} where id=:service_id", array(":service_id"=>$service_id));
  return jsend()->success();
}

function churchservice_editService($params) {
  $i=new CTInterface();
  $i->setParam("id",false);
  $i->setParam("bezeichnung");
  $i->setParam("notiz");
  $i->setParam("servicegroup_id");
  $i->setParam("cdb_gruppen_ids", false);
  $i->setParam("cdb_tag_ids", false);
  $i->setParam("sendremindermails_yn");
  $i->setParam("allowtonotebyconfirmation_yn");
  $i->setParam("sortkey");
//  $i->addModifiedParams();  

  try {
    if ($params["id"]=="null") {
      db_insert("cs_service")
        ->fields($i->getDBInsertArrayFromParams($params))
        ->execute(false);          
    }
    else
      db_update("cs_service")
        ->fields($i->getDBInsertArrayFromParams($params, true))
        ->condition("id", $params["id"], "=")
        ->execute(false);
  } 
  catch (Exception $e) {
    return jsend()->error($e);      
  }
  return jsend()->success();  
}

function churchservice_updateEventService($id, $name, $cdb_person_id, $zugesagt_yn, $reason) {
  global $user, $base_url;
  
  $res=array();
  
  if ($name=="null") $name=null;
  if ($cdb_person_id=="null") $cdb_person_id=null;
  
  // Schaue, ob der Eintrag noch gï¿½ltig ist
  $arr=db_query("select * from {cs_eventservice} where id=:id",array(":id"=>$id))->fetch();
  if (!$arr)
    return "Eintrag nicht gefunden, id nicht gï¿½ltig!";
  if ($arr->valid_yn!=1)
    return "Eintrag nicht mehr aktuell und konnte nicht angepasst, bitte neu laden!";

  // PrŸfe Rechte
  $auth=churchservice_getAuthorization();
  if ((!isset($auth["editservice"][$arr->service_id])) && (!isset($auth["memberservice"][$arr->service_id])) && (!churchService_adminOfEvent($arr->event_id))
    // Es ist trotzdem erlaubt, wenn die PersonId eingetragen ist, dann wurde er ja angefragt
     && ($arr->cdb_person_id!=$user->id))
    return "Not enough rights!"; 

    
  // Wenn die neue €nderung vom gleichen User kommt und noch kein Cron gelaufen ist, 
  // brauchen wir kein neuen Insert, sondern machen nur ein Update.
  // Denn wahrscheinlich war es vorher nur ein Versehen.
  $dt=new datetime();
  if (($arr->modified_pid==$user->id) && ($arr->mailsenddate==null)) {
    db_update("cs_eventservice")
      ->fields(array("name"=>$name, "cdb_person_id"=>$cdb_person_id, "zugesagt_yn"=>$zugesagt_yn, "reason"=>$reason, "mailsenddate"=>null,
                "modified_date"=>$dt->format('Y-m-d H:i:s'), "modified_pid"=>$user->id))
      ->condition("id",$id,"=")
      ->execute();    
    $new_id=$id;    
  } 
  else {     
    // Neuer Eintrag fŸr die €nderung wird angelegt  
    $new_id=db_insert("cs_eventservice")
      ->fields(array("event_id"=>$arr->event_id, "service_id"=>$arr->service_id, "valid_yn"=>1, "counter"=>$arr->counter,
                "name"=>$name, "cdb_person_id"=>$cdb_person_id, "zugesagt_yn"=>$zugesagt_yn, "reason"=>$reason,
                "modified_date"=>$dt->format('Y-m-d H:i:s'), "modified_pid"=>$user->id))
      ->execute();
  
    // Wenn alles durchlief wird nun der bestehende Eintrag auf alt gestellt
    db_update("cs_eventservice")
      ->fields(array("valid_yn"=>0))
      ->condition("id",$id,"=")
      ->execute();

    include_once("system/churchcore/churchcore_db.inc");
    $leader=churchcore_getPersonById($arr->modified_pid);

    // Benachrichtige, wenn es sich um einen anderen handelt, der hier bestï¿½tigt oder ablehnt als den Anfrager (Inquierer)
    if (($leader!=null) && ($leader->email!=null) && ($leader->email!="") && ($user!=null) && ($leader->id!=$user->id)) {
      $setting=churchcore_getUserSettings("churchservice",$leader->id);
      if (isset($setting["informInquirer"]) && ($setting["informInquirer"]==1)) {

        $event=db_query("select e.startdate datum, c.bezeichnung from {cs_event} e, {cc_cal} c 
           where e.cc_cal_id=c.id and e.id=:event_id", (array(":event_id"=>$arr->event_id)))->fetch();        
//        $event=churchcore_getTableData("cs_event", "", "id=".$arr->event_id);
        $service=churchcore_getTableData("cs_service", "", "id=".$arr->service_id);
        if (($event!=false) && ($service!=null)) {                              
//          $event=$event[$arr->event_id];
          $service=$service[$arr->service_id];
          $txt="<h3>Hallo ".$leader->vorname.",</h3><p>";
          
          $subject="";
          // Sagt zu
          if ($zugesagt_yn==1) { 
            $txt.="$user->vorname $user->name hat den Dienst $service->bezeichnung bei $event->datum $event->bezeichnung zugesagt.";
            $subject="[".variable_get('site_name')."] $user->vorname $user->name hat eine Anfrage zugesagt";
          }
          // Schlï¿½gt jemanden vor
          else if ($name!=null) {
            $txt.="$user->vorname $user->name hat beim Dienst $service->bezeichnung bei $event->datum $event->bezeichnung $name vorgeschlagen";
            $subject="[".variable_get('site_name')."] $user->vorname $user->name hat jemanden vorgeschlagen";                        
          }
          // sagt ab
          else {
            $txt.="$user->vorname $user->name hat den Dienst $service->bezeichnung bei $event->datum $event->bezeichnung abgesagt";
            $subject="[".variable_get('site_name')."] $user->vorname $user->name hat eine Anfrage abgesagt";            
          }
          
          if ($reason!=null)
            $txt.="<p>Folgendes wurde als Grund angegeben: ".$reason;
          $txt.='<p><a href="'.$base_url.'?q=churchservice&id='.$arr->event_id.'" class="btn btn-primary">Event aufrufen</a>';
          churchservice_send_mail($subject, $txt, $leader->email);
        }
      } 
      else if (!isset($setting["informInquirer"])) {
        churchcore_saveUserSetting("churchservice", $leader->id, "informInquirer", 0);
      }    
    }          
  }  

  $arr=db_query("select es.*, concat(p.vorname,' ',p.name) as modifieduser from {cs_eventservice} es, {cdb_person} p 
                  where p.id=es.modified_pid and es.id=:id",array(":id"=>$new_id))->fetch();
  $res["eventservice"]=churchservice_extractEventServiceData($arr);    
  
  $res["result"]=true;
  return $res;  
}

/**
* ids - Komma-separierte Liste mit GruppenIds
* Result - Array mit ids, darin enthalten, Name, Vorname, Person_id
 */
function getPersonByGroupIds($ids) {
  $res = db_query("select g.bezeichnung, gpg.gruppe_id g_id, p.id p_id, gp.id gp_id, p.vorname, p.name, p.email, 
  gp.imageurl, p.cmsuserid, gpg.status_no leiter 
     from {cdb_person} p, {cdb_gemeindeperson} gp, {cdb_gemeindeperson_gruppe} gpg, {cdb_gruppe} g
            where gpg.gemeindeperson_id=gp.id and gp.person_id=p.id and g.id=gpg.gruppe_id 
             and gpg.status_no>=0 and gpg.gruppe_id in (".$ids.")");
  $arr=array();
  foreach ($res as $r) {
    if (!isset($arr[$r->g_id])) 
      $arr[$r->g_id]=array();
    $tags_res=db_query("select * from {cdb_gemeindeperson_tag} where gemeindeperson_id=:gp_id", array(":gp_id"=>$r->gp_id));
    $tags=array();
    foreach($tags_res as $tag) {
      $tags[]=$tag->tag_id;
    }
    $r->tags=$tags;

      
    $arr[$r->g_id][$r->p_id]=$r;
  }
  return $arr;
}

function churchservice_getUserSettings($user_pid) {
  $arr=churchcore_getUserSettings("churchservice", $user_pid);
  $arr2=churchcore_getUserSettings("churchdb", $user_pid);
  if (!isset($arr["remindMe"])) { 
    $arr["remindMe"]="1";
    churchcore_saveUserSetting("churchservice", $user_pid,"remindMe","1");
  }
  if (isset($arr2["signature"]))
    $arr["signature"]=$arr2["signature"];
  return $arr;
}

function churchservice_getLastLogId($last_id=0) {
  global $user;
  $arr=db_query("select max(id) max from {cs_eventservice} where modified_pid!=:user and id>=:last_id",
                   array(":user"=>$user->id, ":last_id"=>$last_id))->fetch();
  return $arr->max;
}

function churchservice_pollForNews($last_id) {
  $arr["lastLogId"]=churchservice_getLastLogId($last_id);
  return $arr;
}

function churchservice_ical() {
  global $base_url;
  
  if (!isset($_GET["id"])) 
    echo "Bitte id angeben!";
  else $id=$_GET["id"];
  
  drupal_add_http_header('Content-Type','text/calendar;charset=utf-8',false);
  drupal_add_http_header('Content-Disposition','inline;filename="ChurchTools.ics"',false);  
  drupal_add_http_header('Cache-Control','must-revalidate, post-check=0, pre-check=0',false);  
  drupal_add_http_header('Cache-Control','private',false);

  $content=drupal_get_header();

  $txt="BEGIN:VCALENDAR\r\n"; 
  $txt.="VERSION:2.0\r\n"; 
  $txt.="PRODID:-//ChurchTools//DE\r\n"; 
  $txt.="CALSCALE:GREGORIAN\r\n"; 
  $txt.="X-WR-CALNAME:".variable_get('site_name', 'drupal')." Service-Kalender\r\n";
  $txt.="X-WR-TIMEZONE:Europe/Berlin\r\n"; 
  $txt.="METHOD:PUSH\r\n"; 

  include_once('./'. drupal_get_path('module', 'churchservice') .'/churchservice_db.inc');
  
  $arr=churchservice_getUserCurrentServices($id);
  
  foreach ($arr as $res) {
    $txt.="BEGIN:VEVENT\r\n"; 
    $txt.="ORGANIZER:MAILTO:".variable_get('site_mail', '')."\r\n";
    if ($res->zugesagt_yn==1)
      $txt.="SUMMARY:".$res->dienst." (".$res->servicegroup.")\r\n"; 
    else       
      $txt.="SUMMARY:Anfrage: ".$res->dienst." (".$res->servicegroup.")?\r\n";
    $txt.="X-MICROSOFT-CDO-BUSYSTATUS:BUSY\r\n"; 
    $txt.="URL:".$base_url."/?q=churchservice/entrylist\r\n"; 
    $txt.="DESCRIPTION:".$res->dienst." (".$res->servicegroup.") bei ".$res->event.".";
    if ($res->zugesagt_yn==1)    
      $txt.="\r\n";
    else   
      $txt.=" Anfrage von $res->vorname $res->name [$res->modified_pid]\r\n";
    $txt.="DTSTAMP:".$res->modified_date."\r\n"; 
    $txt.="UID:".$res->eventservice_id."\r\n"; 
    $txt.="DTSTART;TZID=Europe/Berlin:".$res->datum_start."\r\n"; 
    $txt.="DTEND;TZID=Europe/Berlin:".$res->datum_end."\r\n"; 
    $txt.="END:VEVENT\r\n"; 
  }
  $txt.="END:VCALENDAR\r\n";

  echo $txt;
}
function churchservice_saveNote($event_id, $text) {
  $text=str_replace("\'","'",$text);  
  $text=str_replace('\"','"',$text);  
  db_query("update {cs_event} set special=:text where id=$event_id",array(":text"=>$text));  
  return "ok";
}

function churchservice_getEventtemplateServices($auth) {
  if (isset($auth["write"])) { 
    $res = db_query("SELECT * FROM {cs_eventtemplate_service}");
    $arrs=null;
    foreach ($res as $arr) {
      if (!isset($arrs[$arr->eventtemplate_id]))
        $es=array();
      else $es=$arrs[$arr->eventtemplate_id];
      $es[$arr->service_id]=$arr->count;
      $arrs[$arr->eventtemplate_id]=$es;
    }
    return $arrs;   
  }
  return null;
}

/**
 * 
 * @param $template_id wenn null, dann insert, ansonsten update
 * @param $stunde
 * @param $minute
 * @param $category_id
 * @param $event_bezeichnung
 * @param $special
 * @param $admin
 * @param $services
 */
function churchservice_updateOrInsertTemplate($template_id, $bezeichnung, $stunde, $minute, $dauer_sec, $category_id, $event_bezeichnung, $special, $admin, $services) {
  $fields=array();
  $fields["bezeichnung"]=$bezeichnung;
  $fields["event_bezeichnung"]=$event_bezeichnung;
  $fields["stunde"]=$stunde;
  $fields["minute"]=$minute;
  $fields["dauer_sec"]=$dauer_sec;
  $fields["special"]=$special;
  $fields["category_id"]=$category_id;
  $fields["admin"]=$admin;
  
  cdb_log("[ChurchService] Update Template $template_id: cat:$category_id, bez:$event_bezeichnung",2);
  
  if ($template_id==null) {
    $arr=db_query("select max(id) id from {cs_eventtemplate}")->fetch();
    $template_id=$arr->id+1;
    $fields["id"]=$template_id;
    db_insert("cs_eventtemplate")
      ->fields($fields)
      ->execute();
  }
  else {
    db_update("cs_eventtemplate")
      ->fields($fields)
      ->condition('id',$template_id,"=")
      ->execute();
  }
  foreach ($services as $service=>$val) {
    if ($val>0) {
      db_query("insert into {cs_eventtemplate_service} (eventtemplate_id, service_id, count) values (:eventtemplate_id, :service_id, :count) on duplicate key update service_id=:service_id, count=:count",
         array(":eventtemplate_id"=>$template_id, ":service_id"=>$service, ":count"=>$val));
    }
    else    
      db_query("delete from {cs_eventtemplate_service} where eventtemplate_id=:eventtemplate_id and service_id=:service_id",
        array(":eventtemplate_id"=>$template_id, ":service_id"=>$service));
  }      
}
function churchservice_getAbsent() {
  global $config;
  return churchcore_getTableData("cs_absent", "startdate"); //, "datediff(startdate,current_date)>-".$config["churchservice_entries_last_days"]);
}

function churchservice_getAllFacts() {
  global $config;
  $res=db_query("select id, ef.fact_id, ef.value from {cs_event_fact} ef, {cs_event} e 
      where e.id=ef.event_id"); // and datediff(e.datum,current_date)-".$config["churchservice_entries_last_days"]);
  $facts=array();
  foreach ($res as $arr) {
    if (isset($facts[$arr->id]))
      $fact=$facts[$arr->id];
    else $fact=array();
    $fact[]=$arr;
    $facts[$arr->id]=$fact;
  }
  return $facts;
}

function churchservice_getAllSongs() {
  global $config;
  $arr=null;
  
  $db_ss=churchcore_getTableData("cs_song", "bezeichnung");
  if ($db_ss!=null) {
    $files_song=churchcore_getFilesAsDomainIdArr("song");
    $files_song_arrangement=churchcore_getFilesAsDomainIdArr("song_arrangement");
    foreach($db_ss as $db_s) {
      $db_as=db_query("select * from {cs_song_arrangement} where song_id=$db_s->id");
      $arrangement=array();
      foreach($db_as as $db_a) {
        if (isset($files_song_arrangement[$db_a->id]))
          $db_a->files=$files_song_arrangement[$db_a->id];
        unset($db_a->song_id);  
        $arrangement[$db_a->id]=$db_a;
      }
      $db_s->arrangement=$arrangement;
      if (isset($files_song[$db_s->id]))
        $db_s->files=$files_song[$db_s->id];
      $arr["songs"][$db_s->id]=$db_s;    
    }
  }
  
  return $arr;
}

function churchservice_addNewSong($params) {
  $i=new CTInterface();
  $i->setParam("bezeichnung");
  $i->setParam("songcategory_id");
  $i->setParam("ccli");
  $i->setParam("author");
  $i->setParam("copyright");
  $i->addModifiedParams();  
  
  try {
    $params["song_id"]=db_insert("cs_song")->fields($i->getDBInsertArrayFromParams($params))->execute(false);
    $params["bezeichnung"]="Standard-Arrangement";
    $params["default_yn"]=1;
    $i=new CTInterface();
    $i->setParam("song_id");
    $i->setParam("bezeichnung");
    $i->setParam("bpm");
    $i->setParam("beat");
    $i->setParam("tonality");
    $i->setParam("default_yn");
    $i->addModifiedParams();
    try {
      db_insert("cs_song_arrangement")->fields($i->getDBInsertArrayFromParams($params))->execute(false);
    }
    catch (Exception $e) {
      db_query("delete from {cs_song} where id=:id", array(":id"=>$params["song_id"]), false);
      return jsend()->error($e);      
    }
  } 
  catch (Exception $e) {
    return jsend()->error($e);      
  }
  return jsend()->success();  
}

function churchservice_editSong($params) {
  $i=new CTInterface();
  $i->setParam("id");
  $i->setParam("bezeichnung");
  $i->setParam("songcategory_id");
  $i->setParam("ccli");
  $i->setParam("author");
  $i->setParam("copyright");
  $i->addModifiedParams();  
  
  try {
    db_update("cs_song")
      ->fields($i->getDBInsertArrayFromParams($params))
      ->condition("id", $params["id"], "=")
      ->execute(false);
  } 
  catch (Exception $e) {
    return jsend()->error($e);      
  }
  return jsend()->success();  
}

function churchservice_editArrangement($params) {
  $i=new CTInterface();
  $i->setParam("id");
  $i->setParam("bezeichnung");
  $i->setParam("tonality");
  $i->setParam("bpm");
  $i->setParam("beat");
  $i->setParam("length_min");
  $i->setParam("length_sec");
  $i->setParam("note");
  $i->addModifiedParams();  
  
  try {
    db_update("cs_song_arrangement")
      ->fields($i->getDBInsertArrayFromParams($params))
      ->condition("id", $params["id"], "=")
      ->execute(false);
  } 
  catch (Exception $e) {
    return jsend()->error($e);      
  }
  return jsend()->success();  
}


function churchservice_addArrangement($params) {
  $i=new CTInterface();
  $i->setParam("song_id");
  $i->setParam("bezeichnung");
  $i->addModifiedParams();    
  try {
    $res=db_insert("cs_song_arrangement")
      ->fields($i->getDBInsertArrayFromParams($params))
      ->execute(false);
  } 
  catch (Exception $e) {
    return jsend()->error($e);      
  }
  return jsend()->success($res);  
}

function churchservice_delArrangement($params) {
  $i=new CTInterface();
  $i->setParam("id");
  try {
    db_delete("cs_song_arrangement")
      ->fields($i->getDBInsertArrayFromParams($params))
      ->condition("id", $params["id"], "=")
      ->execute(false);
  } 
  catch (Exception $e) {
    return jsend()->error($e);      
  }
  return jsend()->success();  
}

function churchservice_makeAsStandardArrangement($params) {
  $i=new CTInterface();
  $params["default_yn"]=0;  
  $i->setParam("default_yn");
  $i->setParam("song_id");
  $i->addModifiedParams();    
  try {
    db_update("cs_song_arrangement")
      ->fields($i->getDBInsertArrayFromParams($params))
      ->condition("song_id", $params["song_id"], "=")
      ->execute(false);
    $params["default_yn"]=1;  
    db_update("cs_song_arrangement")
      ->fields($i->getDBInsertArrayFromParams($params))
      ->condition("id", $params["id"], "=")
      ->execute(false);
  } 
  catch (Exception $e) {
    return jsend()->error($e);      
  }
  return jsend()->success();  
}


function churchservice_editServiceGroupPersonWeight($params) {
  $i=new CTInterface();
  $i->setParam("servicegroup_id");
  $i->setParam("person_id");
  $i->setParam("max_per_month");
  $i->setParam("relation_weight");
  $i->setParam("morning_weight");
  $i->addModifiedParams();  
  
  try {
    db_insert("cs_servicegroup_person_weight")
      ->fields($i->getDBInsertArrayFromParams($params))
      ->execute(false);
  } 
  catch (Exception $e) {
    try {
      db_query("update {cs_servicegroup_person_weight} 
        set max_per_month=:max_per_month, relation_weight=:relation_weight, morning_weight=:morning_weight
        where servicegroup_id=:servicegroup_id and person_id=:person_id",
         $i->getDBParamsArrayFromParams($params));
      } 
      catch (Exception $e) {
        return jsend()->error($e);
      }      
  }
  return jsend()->success();  
}

function churchservice_saveFact($event_id, $fact_id, $value) {
  global $user;
  $dt = new datetime();
  
  if ($value=="")
    db_query("delete from {cs_event_fact} where event_id=$event_id and fact_id=$fact_id");
  else  
    db_query("insert into {cs_event_fact} (event_id, fact_id, value, modified_date, modified_pid)
           values ($event_id, $fact_id, $value, '".$dt->format('Y-m-d H:i:s')."', $user->id)
            on duplicate key update value=$value, modified_pid=$user->id, modified_date='".$dt->format('Y-m-d H:i:s')."'");
  cdb_log("[ChurchService] Speichere Fakt $value bei Fakt $fact_id, Event $event_id",2, $fact_id, "fact");
  
  return jsend()->success();
}

function churchservice_getServiceGroupPersonWeight() {
  $rel_types=db_query("select id from {cdb_beziehungstyp} where export_aggregation_yn=1 limit 1")->fetch();
  $p=db_query("select * from {cs_servicegroup_person_weight}");
  $res=array();
  if ($p!=false)
  foreach ($p as $s) {
    if (isset($res[$s->person_id]))
      $arr=$res[$s->person_id];
      
    if (($rel_types!=null) && ($s->relation_weight!=0)) {
      $rel=db_query("select * from {cdb_beziehung} where vater_id=:id or kind_id=:id and beziehungstyp_id=$rel_types->id",
         array(":id"=>$s->person_id))->fetch();
      if ($rel!=null) {   
        if ($rel->kind_id!=$s->person_id) 
          $s->relation_id=$rel->kind_id;
        else      
          $s->relation_id= $rel->vater_id;
      }
      else $s->relation_id=null;
    }        
    $arr[$s->servicegroup_id]=$s;
    $res[$s->person_id]=$arr; 
  }  
  return $res;
}

function churchservice_addAbsent($person_id, $absent_reason_id, $bezeichnung, $startdate, $enddate) {
  global $user;
  $dt = new datetime();
    
  $id=db_insert("cs_absent")->fields(array(
     "person_id"=>$person_id,
     "absent_reason_id"=>$absent_reason_id,
     "bezeichnung"=>$bezeichnung,
     "startdate"=>$startdate,
     "enddate"=>$enddate,
     "modified_pid"=>$user->id,
     "modified_date"=>$dt->format('Y-m-d H:i:s'))
  )->execute();
  
  return jsend()->success($id);
}

function churchservice_delAbsent($id) {
  db_query("delete from {cs_absent} where id=:id", array(":id"=>$id));
  return jsend()->success();
}


function churchservice_ajax() {
global $user, $base_url, $files_dir, $config;
  include_once("system/churchcal/churchcal_db.inc");
  include_once("churchservice_db.inc");
  
  $t=microtime(true);
  $function="";
  if (isset($_GET["func"]))
    $function=$_GET["func"];
  else  
    $function=$_POST["func"];
    
  $user_pid=churchcore_getCurrentUserPid();
  $id=null;
  $sub="-";  
  if (isset($_GET["id"]))
    $id=$_GET["id"];
  if (isset($_GET["sub"]))
    $sub=$_GET["sub"];
    
  $timer="start:".round(microtime(true)-$t,3)." ";
  
  switch ($function) {
    case "getMasterData":
      $auth=churchservice_getAuthorization();
      $res=churchservice_getMasterDataTables();
      $res["service"] = churchcore_getTableData("cs_service");
	  $res["masterDataTables"] = churchservice_getMasterDataTablenames();
$timer.="masterData:".round(microtime(true)-$t,3)." ";
	  $res["auth"] = $auth;
	  $res["version"] = churchservice_getVersion();
	  $res["modulespath"] = churchservice_getModulesPath();
	  $res["files_url"] = $base_url.$files_dir;
	  $res["files_dir"] = $files_dir;
	  $res["modulename"] = "churchservice";
	  $res["adminemail"] = variable_get('site_mail', '');
	  $res["user_pid"] = $user_pid;
	  $res["user_name"] = $user->vorname." ".$user->name;
	  $res["userid"] = $user->cmsuserid;	  
      $res["settings"] =  churchservice_getUserSettings($user_pid);
      $res["lastLogId"] = churchservice_getLastLogId();
      $res["eventtemplate"] = churchcore_getTableData("cs_eventtemplate","sortkey");
      $res["category"] = churchcal_getAllowedCategories(false);  
      
      $res["eventtemplate_services"] = churchservice_getEventtemplateServices($auth);
      $res["churchcal_name"] =$config["churchcal_name"];
      $res["songcategory"] = churchcore_getTableData("cs_songcategory","sortkey");
      $res["bootstrap"] = variable_get('bootstrap', false);
$timer.="end:".round(microtime(true)-$t,3);
	  $res["timer"]=$timer;
	  
	  break;
  case "getEventTemplates":
    $res=jsend()->success(churchcore_getTableData("cs_eventtemplate","sortkey"));
    break;      
  case "pollForNews": 
    $res = churchservice_pollForNews($_GET["last_id"]);
    break;
  case "getNewEventData": 
    $res["events"] = churchservice_getNewEventData($_GET["last_id"]);
	break;
  case "getAllEventData": 
      $res["events"] = churchservice_getAllEventData($id);
	  break;
  case "updateEventService": 
    $res=churchservice_updateEventService(
       $_GET["id"],
       (isset($_GET["name"])?$_GET["name"]:null),
       (isset($_GET["cdb_person_id"])?$_GET["cdb_person_id"]:null),
       $_GET["zugesagt_yn"],
       (isset($_GET["reason"])?$_GET["reason"]:null))
     ;
    break;
  case "getPersonByGroupIds":
    // Um fï¿½r die Gruppe die Personennamen zu bekommen
    $res = getPersonByGroupIds($_GET["ids"]);
    break;
  case "saveEvent": 
    $auth=churchservice_getAuthorization();
    if (!$auth["write"]) 
      $res="Keine Rechte!";
    else 
      $res = jsend()->success(churchservice_saveEvent($_GET));
    break;
  case "deleteEvent": 
    $auth=churchservice_getAuthorization();
    if (!$auth["write"]) 
      $res="Keine Rechte!";
    else 
      $res = churchservice_deleteEvent($id);
    break;
  case "deleteService": 
    $auth=churchservice_getAuthorization();
    if (!isset($auth["editservice"]) || (!isset($auth["editservice"][$id]))) 
      $res=jsend()->error("Keine Rechte!");
    else 
      $res = churchservice_deleteService($id);
    break;    
  case "editService": 
    $auth=churchservice_getAuthorization();
    if (!isset($auth["editgroup"]) || (!isset($auth["editgroup"][$_GET["servicegroup_id"]]))) 
      $res=jsend()->error("Keine Rechte!");
    else 
      $res = churchservice_editService($_GET);
    break;    
  case "getGroupAndTagInfos":
    $a=array();
    if (user_access("view alldata", "churchdb"))
      $a["groups"]=getAllGroups();
    else
      $a["groups"]=churchdb_getMyGroups($user->id, false, true);
    $a["tags"]=getAllTags();
    $res=jsend()->success($a);    
    break;
  case "addOrRemoveServiceToEvent": 
    $res = churchservice_addOrRemoveServiceToEvent();
    break;
    
/*  case "delServiceFromEvent": 
    $res = churchservice_delServiceFromEvent($_GET["id"], $_GET["service_id"]);
    break;*/
  case "sendEMailToPersonIds":
    $inhalt=$_POST["inhalt"];
    $usetemplate=(isset($_POST["usetemplate"]) && ($_POST["usetemplate"]==true));
    if ($_POST["domain_id"]!="null") {
//      $res=db_query("select concat(year(datum),'-',month(datum),'-', day(datum)) as datum from {cs_event} where id=".$_GET["domain_id"])->fetch();
//      $datum=$res->datum;
      $inhalt.='<p><a class="btn btn-royal" href="'.$base_url.'?q=churchservice&id='.$_POST["domain_id"].'">Event aufrufen</a>';
    } 
    $res = churchcore_sendEMailToPersonIds($_POST["ids"], $_POST["betreff"], $inhalt, null, true, $usetemplate);
    break;
  case "saveTemplate":
    $res="ok";
    churchservice_updateOrInsertTemplate(($_GET["template_id"]=="null"?null:$_GET["template_id"]), $_GET["bezeichnung"], $_GET["stunde"], $_GET["minute"], $_GET["dauer_sec"], $_GET["category_id"], $_GET["event_bezeichnung"], $_GET["special"], $_GET["admin"], $_GET["services"]);
    break;
  case "deleteTemplate":    
    db_query("delete from {cs_eventtemplate_service} where eventtemplate_id=$id"); 
    db_query("delete from {cs_eventtemplate} where id=$id");
    $res="ok"; 
    break;
  case "saveSetting":
    churchcore_saveUserSetting("churchservice", $user_pid, $sub, $_GET["val"]);
    $res="ok";
    break;     
  case "delFile":
    $res=churchcore_delFile($id);
    break;     
  case "renameFile":
    $res=churchcore_renameFile($id, $_GET["filename"]);
    break;     
  case "copyFile":
    $res=churchcore_copyFileToOtherDomainId($id, $_GET["domain_id"]);
    break;     
  case "getFiles":
    $res=churchcore_getFiles("service");
    break;     
  case "getAllSongs":
    $res=churchservice_getAllSongs();
    break;     
  case "addNewSong":
    if (user_access("edit song", "churchservice")) 
      $res=churchservice_addNewSong($_GET);
    else $res=jsend()->fail("Keine Rechte!");      
    break;
  case "editSong":
    if (user_access("edit song", "churchservice")) 
      $res=churchservice_editSong($_GET);
    else $res=jsend()->fail("Keine Rechte!");      
    break;
  case "editArrangement":
    if (user_access("edit song", "churchservice")) 
      $res=churchservice_editArrangement($_GET);
    else $res=jsend()->fail("Keine Rechte!");  
    break;    
  case "addArrangement":
    if (user_access("edit song", "churchservice")) 
      $res=churchservice_addArrangement($_GET);
    else $res=jsend()->fail("Keine Rechte!");      
    break;    
    case "delArrangement":
    if (user_access("edit song", "churchservice")) 
      $res=churchservice_delArrangement($_GET);
    else $res=jsend()->fail("Keine Rechte!");      
    break;    
  case "makeAsStandardArrangement":
    if (user_access("edit song", "churchservice")) 
      $res=churchservice_makeAsStandardArrangement($_GET);
    else $res=jsend()->fail("Keine Rechte!");      
    break;
  case "getAllFacts":
    $res=churchservice_getAllFacts();
    break;     
  case "saveFact":
    $res=churchservice_saveFact($_GET["event_id"], $_GET["fact_id"], $_GET["value"]);
    break;     
  case "getAbsent":
    $res= churchservice_getAbsent($user_pid);
    break;
  case "addAbsent":
    $res= churchservice_addAbsent($_GET["person_id"], $_GET["absent_reason_id"], $_GET["bezeichnung"], $_GET["startdate"], $_GET["enddate"]);
    break;
  case "delAbsent":
    $res= churchservice_delAbsent($_GET["id"]);
    break;
  case "saveNote":
    churchservice_saveNote($_GET["event_id"], $_GET["text"]);
    $res="ok";
    break;     
  case "getServiceGroupPersonWeight":
    $res["weight"]=churchservice_getServiceGroupPersonWeight();
    break;     
  case "editServiceGroupPersonWeight":
    if (user_access("view", "churchservice")) 
      $res=churchservice_editServiceGroupPersonWeight($_GET);
    else $res=jsend()->fail("Keine Rechte!");      
    break;
  case "getChurchDBMasterData":
    $res["cdb_gruppen"]=churchcore_getTableData("cdb_gruppe");
    $res["cdb_tag"]=churchcore_getTableData("cdb_tag");
    break;
  case "deleteMasterData" :
    if ((user_access("edit masterdata","churchservice")) && (churchcore_isAllowedMasterData(churchservice_getMasterDataTablenames(), $_GET["table"]))) {
      churchcore_deleteMasterData($id, $_GET["table"]);
      cdb_log("f:$function id:$id",2,-1,CDB_LOG_MASTERDATA,1);
      $res=jsend()->success();
    }
    else $res=jsend()->error("Keine Rechte! ".(!user_access("edit masterdata","churchservice")?"Bitte edit masterdata vergeben.":"Unerlaubte Tabelle!"));
    break;
  case "saveMasterData" :
    if ((user_access("edit masterdata","churchservice")) && (churchcore_isAllowedMasterData(churchservice_getMasterDataTablenames(), $_GET["table"]))) {      
      churchcore_saveMasterData($id, $_GET["table"]);
      cdb_log("f:$function id:$id",2,-1,CDB_LOG_MASTERDATA,1);
      $res=jsend()->success();
    } 
    else $res=jsend()->error("Keine Rechte! ".(!user_access("edit masterdata","churchservice")?"Bitte edit masterdata vergeben.":"Unerlaubte Tabelle!"));
    break;  
    
	default: $res[]="Unknown function call: ".$function;    
  }
  drupal_json_output($res);
}

